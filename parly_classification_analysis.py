# -*- coding: utf-8 -*-
"""Parly Classification Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_2XDZZNjDK86Atpu34wi-oKAZEYqYUxX

#Parliamentary data analysis

---
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
from datetime import datetime

"""#Prep"""

#load the ministers dataset to see if there are any overlaps

ministers = pd.read_csv("Ministers.csv")
ministers['start_date'] = pd.to_datetime(ministers['start_date'], format = "%Y-%m-%d")

#replace incorrect dates for current ministers
ministers['end_date'] = ministers['end_date'].replace('9999-12-31', "2023-12-31")
ministers['end_date'] = pd.to_datetime(ministers['end_date'], format = "%Y-%m-%d")

#load the shadow ministers dataset to see if there are any overlaps

shadow_ministers = pd.read_csv("ShadowMinisters.csv")
shadow_ministers['start_date'] = pd.to_datetime(shadow_ministers['start_date'],format = "%d/%m/%Y").dt.strftime('%Y-%m')
shadow_ministers['end_date'] = pd.to_datetime(shadow_ministers['end_date'],format = "%d/%m/%Y").dt.strftime('%Y-%m')

words = r"\b(1.5|1.5 degrees|active travel|adaptation|agri-climate|agrisolar|agrivoltaics|agrophotovoltaics|aviation|build back greener|carbon|CBAM|CCL|CCUS|circular economy|clean air|climate action|climate aid|climate breakdown|climate change|climate commitments|climate crisis|climate education|climate emergency|climate engineering|climate finance|climate fund|climate impacts|climate investment|climate justice|climate leader|climate leadership|climate policy|climate protests|climate refugees|climate resilience|climate resilient|climate risk|climate solution|climate tech|climate technologies|climate-friendly|climate-smart|CO2|coal|cop23|cop24|cop25|cop26|cop27|cycling|decarbonisation|decarbonise|decarbonising|demand reduction|divestment|drought|ecocide|ecological|ecology|electric vehicle|electrification|emissions|energy|energy-efficient|environment|EV|extreme temperature|extreme weather|fair transition|feed-in-tariffs|flood|food security|food waste|forestry|fossil fuel|fossil fuels|fracking|frequent flyer|future generations|gas|geoengineering|geothermal|GHG|global heating|global warming|green building|green business|green construction|green finance|green jobs|greenhouse gas|heat|heat pump|high-emitting|hydrogen|hydropower|IAM|idling|insulation|integrated assessment model|IPCC|just transition|land use|LEZ|loss and damage|low emission|low-carbon|LULUCF|methane|mitigation|nature|nature restoration|NDC|net zero|nuclear energy|nuclear power|offshore wind|oil|onshore wind|Paris Agreement|PDRC|peatland|petrol|phase-out|photovoltaic|pollution|PV|radiative cooling|reforestation|renewable|sea level rise|solar|storm|sustainable|tidal energy|tidal power|transport|ULEZ|UNFCCC|wildfire|wind energy|zero-carbon|zero-emission|zero-energy|zero-pollution)\b"

#list of noteworthy events and proportional y-axis position for plotting
events = [
        ('2017-11', 0.35, "COP23 \nBonn"),
        ('2018-03', 0.5, "Beast from the \n East snowstorm"),
        ('2018-11', 0.6, "2018 Global\n climate protests"),
        ('2018-12', 0.35,"COP24 \nKatowice"),
        ('2019-03', 0.8, "FFF Climate \n strikes"),
        ('2019-04', 0.45, "XR protests \n Parliament Square"),
        ('2019-05', 0.6, "FFF Climate \n strikes"),
        ('2019-05', 0.9, "UK Parliament \n climate emergency"),
        ('2019-09', 0.5, "FFF Climate \n strikes"),
        ('2019-10', 0.75, "XR \nprotests"),
        ('2019-12', 0.35, "COP25 \nMadrid"),
        ('2020-03', 0.55, "Covid\n lockdown"),
        ('2020-09', 0.4, "XR Autumn \nRebellion"),
        ('2021-01', 0.5, "USA rejoins \nParis Accord"),
        ('2021-06', 0.7, "XR protest\n G7 Summit"),
        ('2021-09', 0.8, "UK fuel \nsupply crisis"),
        ('2021-10', 0.3, "Insulate Britain \nprotests"),
        ('2021-10', 0.5, "COP26 \nGlasgow"),
        ('2022-02', 0.7, "Ukraine War"),
        ('2022-05', 0.5, "JustStopOil \nprotests"),
        ('2022-11', 0.4, "COP27 \nEgypt")
    ]

"""#EDMs"""

edms_df = pd.read_csv('ParlyEDMslabeled.csv')
edms_df = edms_df[edms_df['title'].str.contains(words, case = False, regex = True)]
edms_df['month'] = pd.to_datetime(edms_df['date'], format = "%d/%m/%Y").dt.strftime('%Y-%m')
edms_df.label.value_counts(normalize = True).mul(100)

len(edms_df)

"""##Overall trends"""

#Plot monthly edms count by label

edms_monthly = pd.DataFrame(edms_df.groupby(["month", "label"]).size().unstack(level = 'label',fill_value=0))
edms_monthly.index = pd.to_datetime(edms_monthly.index)
#by number
#edms_monthly.plot(figsize=(20,6), rot = 90, yticks = range(0,11, 1), xticks = edms_monthly.index).grid(axis = "y")
fig, ax = plt.subplots(figsize=(20,6))
edms_monthly.plot(ax = ax)
ax.set( title = "EDMs over time" ,xticks = edms_monthly.index)
annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in edms_monthly.index else edms_monthly.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

ax.set_xlim(edms_monthly.index[0], edms_monthly.index[-1])
ax.set_xticklabels(labels = edms_monthly.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))
fig.autofmt_xdate()
plt.show()

#Plot monthly edms count by label

edms_sponsors = edms_df.pivot_table(index='month', columns='label', values='sponsors', aggfunc="sum", fill_value=0)
edms_sponsors.index = pd.to_datetime(edms_sponsors.index)
#by number
#edms_monthly.plot(figsize=(20,6), rot = 90, yticks = range(0,11, 1), xticks = edms_monthly.index).grid(axis = "y")
fig, ax = plt.subplots(figsize=(20,6))
edms_sponsors.plot(ax = ax)
ax.set( title = "EDM Sponsors over time" ,xticks = edms_sponsors.index)
annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in edms_monthly.index else edms_monthly.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

ax.set_xlim(edms_sponsors.index[0], edms_sponsors.index[-1])
ax.set_xticklabels(labels = edms_sponsors.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))
plt.show()

edms_df.groupby("party").size().transform(lambda x: x/sum(x))*100

# by monthly percentages
#pd.DataFrame(edms_df.groupby('month')['label'].value_counts(normalize = True).mul(100)).unstack(fill_value=0).plot(figsize=(20,6), rot = 90,yticks = range(0,120, 10), xticks = all_ticks, subplots = True).grid(axis = "y")

edms_sponsors.quantile(0.75)

edms_df.boxplot(by ='label', column =['sponsors'])

edms_df.groupby(["label","sponsors"]).size()

"""##Trends by party"""

#plot by party submissions by label
edms_df.groupby(["party","label"]).size().unstack().plot.barh( xticks = range(0,70, 5), title = "Breakdown of EDM classifications by party").grid(axis = "x")

def edm_party_plot(df, party):
    subset = df.loc[(df["party"] == party)]
    subset = pd.DataFrame(subset.groupby(["month", "label"]).size().unstack(fill_value=0))
    subset.index = pd.to_datetime(subset.index)

    fig, ax = plt.subplots(figsize=(20, 6))
    subset.plot(ax=ax)

    ax.set(title=(party + " EDMs over time"), xticks=subset.index)

   # Define text annotations for significant events with y-position as a fraction
    annotations = events

    for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in subset.index else subset.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

    ax.set_xlim(subset.index[0], subset.index[-1])
    ax.set_xticklabels(labels=subset.index, rotation=70, ha="right", rotation_mode="anchor")

    ax.grid()
    ax.legend(loc="upper left", title="Labels")
    ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
    ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

    plt.show()

edm_party_plot(edms_df, "Conservative")

edm_party_plot(edms_df, "Labour")

edm_party_plot(edms_df, "Scottish National Party")

edm_party_plot(edms_df, "Green Party")

"""#Debates

Run SentScript.py in ARC first

##Relabel based on sentiment
Only need to run once
"""

debates_df = pd.read_csv('ParlyDebateslabeled.csv')
debates_df = debates_df[debates_df['title'].str.contains(words, case = False, regex = True)]
#debates_df.label[debates_df.label == "Norma"] = "Normative"
#debates_df.label[debates_df.label == "Delay"] = "Delay_Denial"
debates_df['month'] = pd.to_datetime(debates_df['date'], format = "%d/%m/%Y").dt.strftime('%Y-%m')
debates_df.label.value_counts(normalize = True)

new_debs = debates_df.copy()

len(new_debs)

conditions=[
    ((new_debs.label == "Delay_Denial") & (new_debs.sentiment == "POSITIVE")),
    ((new_debs.label == "Delay_Denial") & (new_debs.party == "Conservative") & (new_debs.sentiment == "NEGATIVE")),
    ((new_debs.label == "Delay_Denial") & (new_debs.party != "Conservative") & (new_debs.sentiment == "NEGATIVE")),
    ((new_debs.label == "Normative") & (new_debs.sentiment == "POSITIVE")),
    ((new_debs.label == "Normative") & (new_debs.sentiment == "NEGATIVE")),
    (new_debs.label == "Economic justification")
]

values = ["Delay_Denial","Economic justification", "Normative" ,"Normative" , "Normative", "Economic justification"]
new_debs['new_label'] = np.select(conditions, values)

new_debs.new_label.value_counts(normalize=True)

new_debs.to_csv("RelabeledDebs.csv")

debates_df = new_debs

"""##Overall trends"""

debates_df = pd.read_csv('RelabeledDebs.csv')
debates_df = debates_df[debates_df['title'].str.contains(words, case = False, regex = True)]
#debates_df.label[debates_df.label == "Norma"] = "Normative"
#debates_df.label[debates_df.label == "Delay"] = "Delay_Denial"
debates_df['month'] = pd.to_datetime(debates_df['date'], format = "%d/%m/%Y").dt.strftime('%Y-%m')
debates_df = debates_df.iloc[: , 3:]
debates_df.new_label.value_counts(normalize = True)

debates_df

#Plot monthly debates count by label

debates_monthly = pd.DataFrame(debates_df.groupby(["month", "new_label"]).size().unstack(level = 'new_label',fill_value=0))
debates_monthly.index = pd.to_datetime(debates_monthly.index)
#by number
fig, ax = plt.subplots(figsize=(20,6))
debates_monthly.plot(ax = ax)
ax.set(title = "All Debates over time" ,xticks = debates_monthly.index)

annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in edms_monthly.index else edms_monthly.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

ax.set_xlim(debates_monthly.index[0], debates_monthly.index[-1])
ax.set_xticklabels(labels = debates_monthly.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

len(debates_df)

#plot by party submissions by label
debates_df.groupby(["party","new_label"]).size().unstack().plot.barh( xticks = range(0,2200, 100), title = "Breakdown of Debate classifications by party", figsize=(20,8)).grid(axis = "x")

#split into separate datasets
lords_debs = debates_df.loc[debates_df["house"] == 2]
commons_debs = debates_df.loc[debates_df["house"] == 1]
conservative_debs = commons_debs.loc[commons_debs["party"] == "Conservative"]
labour_debs = commons_debs.loc[commons_debs["party"] == "Labour"]

"""## Government minister trends"""

#check for ministers overlaps
c_ministers = conservative_debs.reset_index().merge(ministers, how='left', left_on = 'speaker', right_on = "minister_name")
c_ministers  = c_ministers[c_ministers['date'].between(c_ministers['start_date'], c_ministers['end_date'])].drop_duplicates("Unnamed: 0")

c_ministers.groupby(["new_label"]).size().transform(lambda x: x/sum(x))*100

#Plot monthly debates count by label

c_ministers_monthly = pd.DataFrame(c_ministers.groupby(["month", "new_label"]).size().unstack(level = 'new_label',fill_value=0))
c_ministers_monthly.index = pd.to_datetime(c_ministers_monthly.index)
#by number
fig, ax = plt.subplots(figsize=(20,6))
c_ministers_monthly.plot(ax = ax)
ax.set(title = "Government minister debates over time" ,xticks = c_ministers_monthly.index)

annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in edms_monthly.index else edms_monthly.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

ax.set_xlim(c_ministers_monthly.index[0], c_ministers_monthly.index[-1])
ax.set_xticklabels(labels = c_ministers_monthly.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

c_ministers.groupby(["org_name","new_label"]).size().unstack().plot.barh(title = "Breakdown of government minister departments by classification", figsize=(15,10), xticks = range(0,370, 20) ).grid(axis = "x")

pd.DataFrame(c_ministers.loc[c_ministers["org_name"] == "Department for Business, Energy and Industrial Strategy"].groupby(["new_label"]).size().transform(lambda x: x/sum(x))*100)

c_ministers.groupby(["cabinet_status","new_label"]).size().unstack().plot.barh(title = "Breakdown of government cabinet status by classification", figsize=(15,10)).grid(axis = "x")

def minister_party_plot(status):
  subset = c_ministers.loc[(c_ministers["cabinet_status"] == status)]
  subset = pd.DataFrame(subset.groupby(["month","new_label" ]).size().unstack(fill_value=0))
  subset.index = pd.to_datetime(subset.index)
  #plot = pd.DataFrame(subset.groupby('month')['label'].value_counts(normalize = True).mul(100)).unstack(fill_value=0).plot(figsize=(20,4), xticks = ticks, rot = 90, title = (party + " EDMs % over time"))
  #plot = subset.groupby(["month","label" ]).size().unstack(fill_value=0).plot(figsize=(20,4), yticks = range(0,6, 1), xticks = ticks, rot = 90, title = (party + " EDMs over time")).grid(axis = "y")
#by number
  fig, ax = plt.subplots(figsize=(20,4))
  subset.plot(ax = ax)
  ax.set( title = (status + " Debates over time") ,xticks = subset.index)

   # Define text annotations for significant events with y-position as a fraction
  annotations = events
  for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        x_position = x_data if x_data in subset.index else subset.index[0]
        ax.text(x_position, y_position, event, ha="center", weight = "bold")

  ax.set_xlim(subset.index[0], subset.index[-1])
  ax.set_xticklabels(labels=subset.index, rotation=70, ha="right", rotation_mode="anchor")

  ax.grid()
  ax.legend(loc="upper left", title="Labels")
  ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
  ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

  plt.show()

#minister_party_plot("Non-cabinet")

#minister_party_plot("Full cabinet")

"""##Shadow minister trends"""

s_ministers = labour_debs.reset_index().merge(shadow_ministers, how='left', left_on = 'speaker', right_on = "minister_name")
s_ministers = s_ministers[s_ministers['month'].between(s_ministers['start_date'], s_ministers['end_date'])].drop_duplicates("Unnamed: 0")

s_ministers.groupby(["new_label"]).size().transform(lambda x: x/sum(x))*100

s_ministers.groupby(["dept_name","new_label"]).size().unstack().plot.barh(title = "Breakdown of shadow minister departments by classification", figsize=(15,10), xticks = range(0,90, 10)).grid(axis = "x")

s_ministers.groupby(["dept_code"]).size().transform(lambda x: x/sum(x))*100

s_ministers.loc[s_ministers["dept_code"] == "BEIS"].groupby(["new_label"]).size().transform(lambda x: x/sum(x))*100

s_ministers_monthly = pd.DataFrame(s_ministers.groupby(["month", "new_label"]).size().unstack(level = 'new_label',fill_value=0))
s_ministers_monthly.index = pd.to_datetime(s_ministers_monthly.index)
#by number
fig, ax = plt.subplots(figsize=(20,6))
s_ministers_monthly.plot(ax = ax)
ax.set(title = "Shadow minister debates over time" ,xticks = s_ministers_monthly.index, yticks = range(0,33, 5) )

annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in edms_monthly.index else edms_monthly.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

ax.set_xlim(s_ministers_monthly.index[0], s_ministers_monthly.index[-1])
ax.set_xticklabels(labels = s_ministers_monthly.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

#deb_party_plot(commons_debs, "Labour")

"""##House of Commons"""

#Plot monthly debates count by label

commons_debs_monthly = pd.DataFrame(commons_debs.groupby(["month", "new_label"]).size().unstack(level = 'new_label',fill_value=0))
commons_debs_monthly.index = pd.to_datetime(commons_debs_monthly.index)
#by number
fig, ax = plt.subplots(figsize=(20,6))
commons_debs_monthly.plot(ax = ax)
ax.set(title = "Commons Debates over time" ,xticks = commons_debs_monthly.index)

annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in edms_monthly.index else edms_monthly.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

ax.set_xlim(commons_debs_monthly.index[0], commons_debs_monthly.index[-1])
ax.set_xticklabels(labels = debates_monthly.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

c_ids = c_ministers["Unnamed: 0"].reset_index(drop = True)
s_ids = s_ministers["Unnamed: 0"].reset_index(drop = True)

bb_debs = commons_debs[~commons_debs["Unnamed: 0"].isin(c_ids)]
bb_debs = bb_debs[~bb_debs["Unnamed: 0"].isin(s_ids)]

bb_debs.groupby("party").size().transform(lambda x: x/sum(x)).plot.barh()

bb_debs.groupby(["party","new_label"]).size().unstack().plot.barh( xticks = range(0,800, 50), title = "Breakdown of HoC backbench debate classifications by party", figsize=(20,8)).grid(axis = "x")

pd.DataFrame(bb_debs.groupby(["new_label"]).size().transform(lambda x: x/sum(x))*100)

pd.DataFrame(bb_debs.loc[bb_debs["party"] == "Conservative"].groupby(["new_label"]).size().transform(lambda x: x/sum(x))*100)

def deb_party_plot(df, party, type):
    subset = df.loc[(df["party"] == party)]
    subset = pd.DataFrame(subset.groupby(["month", "new_label"]).size().unstack(fill_value=0))
    subset.index = pd.to_datetime(subset.index)
    house = "Commons" if df.house.iloc[0] == 1 else "Lords"

    fig, ax = plt.subplots(figsize=(20, 6))
    subset.plot(ax=ax)

    ax.set(title=(house + " " + party + " " + "Debates over time" + ": " + type), xticks=subset.index)

   # Define text annotations for significant events with y-position as a fraction
    annotations = events

    for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in subset.index else subset.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

    ax.set_xlim(subset.index[0], subset.index[-1])
    ax.set_xticklabels(labels=subset.index, rotation=70, ha="right", rotation_mode="anchor")

    ax.grid()
    ax.legend(loc="upper left", title="Labels")
    ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
    ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

    plt.show()

deb_party_plot(bb_debs, "Green", "Backbench")

deb_party_plot(bb_debs, "Conservative", "Backbench")

deb_party_plot(commons_debs, "Conservative","all MPs")

deb_party_plot(bb_debs, "Labour", "Backbench")

deb_party_plot(commons_debs, "Labour","all MPs")

deb_party_plot(bb_debs, "Scottish National Party")

"""##House of Lords"""

lords_debs_monthly = pd.DataFrame(lords_debs.groupby(["month", "new_label"]).size().unstack(level = 'new_label',fill_value=0))
lords_debs_monthly.index = pd.to_datetime(lords_debs_monthly.index)
#by number
fig, ax = plt.subplots(figsize=(20,6))
lords_debs_monthly.plot(ax = ax)
ax.set(title = "Lords Debates over time" ,xticks = lords_debs_monthly.index)

annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        #x_position = x_data if x_data in edms_monthly.index else edms_monthly.index[0]
        ax.text(x_data, y_position, event, ha="center", weight = "bold")

ax.set_xlim(lords_debs_monthly.index[0], lords_debs_monthly.index[-1])
ax.set_xticklabels(labels = lords_debs_monthly.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

len(lords_debs)

pd.DataFrame(lords_debs.groupby(["new_label"]).size().transform(lambda x: x/sum(x))*100)

lords_debs.groupby(["party","new_label"]).size().unstack().plot.barh( xticks = range(0,800, 50), title = "Breakdown of HoL debate classifications by party", figsize=(20,8)).grid(axis = "x")

deb_party_plot(lords_debs, "Conservative")

deb_party_plot(lords_debs, "Labour")

"""#Petitions"""

petitions_df = pd.read_csv('ParlyEpetitionslabeled.csv')
petitions_df = petitions_df[petitions_df['petition_title'].str.contains(words, case = False, regex = True)]
petitions_df['month'] = pd.to_datetime(petitions_df['created'], format = "%Y-%m-%d").dt.strftime('%Y-%m')
petitions_df.label.value_counts(normalize = True)

len(petitions_df)

petitions_df.signature_count.quantile(1)

petitions_df.boxplot(by ='label', column =['signature_count'])

from matplotlib.axis import XAxis
from datetime import timedelta

petitions_monthly = pd.DataFrame(petitions_df.groupby(["month","label"]).size().unstack(fill_value=0))
petitions_monthly.index = pd.to_datetime(petitions_monthly.index)
fig, ax = plt.subplots(figsize=(20,6))
petitions_monthly.plot(ax = ax)
ax.set(xticks = petitions_monthly.index, title = "ePetitions over time")
annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        x_position = x_data if x_data in petitions_monthly.index else (x_data - timedelta(30))
        ax.text(x_position, y_position, event, ha="center", weight = "bold")

ax.set_xlim(petitions_monthly.index[0], petitions_monthly.index[-1])
ax.set_xticklabels(labels = petitions_monthly.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

petitions_signatures = petitions_df.pivot_table(index='month', columns='label', values='signature_count', aggfunc="sum", fill_value=0)
petitions_signatures.index = pd.to_datetime(petitions_signatures.index)
fig, ax = plt.subplots(figsize=(20,6))
petitions_signatures.plot(ax = ax)
ax.set(xticks = petitions_signatures.index, title = "ePetitions Signatures over time")
annotations = events

for date, y_fraction, event in annotations:
        # Calculate the y-position as a fraction of the y-axis range
        y_range = ax.get_ylim()[1] - ax.get_ylim()[0]
        y_position = ax.get_ylim()[0] + y_fraction * y_range
        x_data = pd.to_datetime(date)
        x_position = x_data if x_data in petitions_monthly.index else (x_data - timedelta(30))
        ax.text(x_position, y_position, event, ha="center", weight = "bold")

ax.set_xlim(petitions_signatures.index[0], petitions_signatures.index[-1])
ax.set_xticklabels(labels = petitions_signatures.index, rotation = 70, ha = "right", rotation_mode = "anchor")

ax.grid()
ax.legend(loc = "upper left", title = "Labels")

ax.xaxis.set_major_locator(mpl.dates.MonthLocator(bymonthday=1))
ax.xaxis.set_major_formatter(mpl.dates.DateFormatter('%h-%Y'))

"""##Government responses"""

response_df = pd.read_csv('ParlyEpetitionsResponselabeled.csv')
response_df = response_df[response_df['petition_title'].str.contains(words, case = False, regex = True)]
response_df['month'] = pd.to_datetime(response_df['created'], format = "%d/%m/%Y").dt.strftime('%Y-%m')
response_df.response_label.value_counts(normalize = True)

response_df.groupby(['petition_label','response_label']).size().unstack()